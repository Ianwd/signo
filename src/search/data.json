[
  {
    "id": "394804f8-f9bb-4637-b64c-446888809096",
    "title": "Contribute",
    "description": "Take part to our project and contribute to a more open world of inclusiveness.",
    "link": "https://signo.mathieudelvaux.be/contribute",
    "category": "contribute",
    "keywords": [
      "contribute"
    ],
    "content": "signo was built in the objective of being a robust base that can expend easily according to users contributions. Because open and shared knowledge is a key to our society and expending intelligence, we allow anyone to submit contributions. If you want to take part of the signo project, all you have to to is head to our GitHub repository where you can read the instructions on how to clone our documentation to your machine to start working. our GitHub repository Indeed, you must have a bit of Git knowledge in order to make a pull request and to understand the way a Version Control System works. If you don't have this knowledge, don't worry, just head to the web for a tutorial. This one from Roger Dudler is pretty simple and available in multiple languages. This one from Roger Dudler Join the project Join the project"
  },
  {
    "id": "e2dda1ec-9524-468b-bfca-36c88bf7c4a5",
    "title": "Colors",
    "description": "Learn how to take care of color curation in your design process.",
    "link": "https://signo.mathieudelvaux.be/design/colors",
    "category": "design",
    "keywords": [
      "design",
      "colors"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Colors Contrast ratio Color and contrast are key elements for users to correctly see and read your content. Making sure your color palette contrast is sufficient is the first step to make sure interactive elements are visible and your content is usable. This will also be profitable to users using your project in a very bright environment. Do These lines of text follow the color contrast ratio recommendations and are legible against their background colors. Don't These lines of text do not follow the minimum color ratio recommendations and are much harder to read. Do These lines of text follow the color contrast ratio recommendations and are legible against their background colors. Do These lines of text follow the color contrast ratio recommendations and are legible against their background colors. Don't These lines of text do not follow the minimum color ratio recommendations and are much harder to read. Don't These lines of text do not follow the minimum color ratio recommendations and are much harder to read. W3C recommendations Color contrast is determined on a 21 ratio scale defined by the intensity of light emitted by a foreground color and its background. This contrast is usually written as 1:1, up to 21:1. The higher the difference between the two numbers, the higher the contrast is and the better the readability of text is. The World Wide Web Consortium recommends a minimum of: 4.5:1 ratio for small text against its background; at least a 3:1 ratio for larger text (14pt bold or 18pt regular). 4.5:1 ratio for small text against its background; at least a 3:1 ratio for larger text (14pt bold or 18pt regular). This is for AA compliance. For more advanced compliance, AAA, your minimums are: 7:1 ratio for small text; 4.5:1 ratio for larger text. 7:1 ratio for small text; 4.5:1 ratio for larger text. We made it easy for you to check your contrast: simply use our in-house ratio checker. our in-house ratio checker Color blindness There are multiple types of color blindness but it all comes down to not seeing color clearly, getting colors mixed up, or not being able to differentiate certain colors. In a group of eight men and eight women on your team, there’s a 50% chance that at least one teammate is color-blind. While there are several different types of color blindness, all individuals who are color-blind rely on cues like shapes or semantics in situations where they could otherwise rely on clearly differentiated colors, like when waiting for a traffic light to turn \"green\". You should not rely solely on colors to give information, for buttons or even color selection. Labeling elements is a key element to accessibility. But besides that, believe it or not, but designing for color-blinded people isn't much different than \"regular\" design. Grasping what color-impaired people see is hard to define, and trust me, this comes from a color-blind designer. But basically it is a color shifting or harder distinction of hues. An easy design fix is to first design your artboards in black and white, namely wireframes. Sensory information According to different studies, we all see slightly different colors. Our eyes are not all identical. And while it might be okay for the majority of people, some people simply cannot see colors, or not how \"normal people\" perceive them. This is why you should not convey information strictly through color. Do These color bullets are understandable to anyone because they do not only convey sensory information. Don't These color bullets can be mixed or not be understood because the information is only conveyed by color. Do These color bullets are understandable to anyone because they do not only convey sensory information. Do These color bullets are understandable to anyone because they do not only convey sensory information. Don't These color bullets can be mixed or not be understood because the information is only conveyed by color. Don't These color bullets can be mixed or not be understood because the information is only conveyed by color. Never forget to use visual cues to enhance your design for visually-impaired people."
  },
  {
    "id": "2a10299f-5c3c-41cf-89d4-066c6f9986af",
    "title": "Focus",
    "description": "Find out how to focus attention to what's relevant.",
    "link": "https://signo.mathieudelvaux.be/design/focus",
    "category": "design",
    "keywords": [
      "design",
      "focus"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Focus Through this article, we go through four laws taken from the Gestalt philosophy. Gestalt laws define the process of perception and mental representation. In other words, our brain tends to create structured sets. These laws have been incorporated into web-based ergonomics to allow a better understanding of the interfaces and facilitate their reading. In a nutshell, they simplify the use of the web. Similarity A great way to create connections in an interface is using similarity between objects. You can color, texture, size, or shape on-page elements in a similar fashion and your users will unconsciously tie them together. In counterpart, elements that don't share visual conformity will automatically stand out to the eye. This example is self-explanatory. Without thinking about it, you know that each of these cards have the same hierarchy level and are siblings. It allows the people who use your website or app to easily figure out natural structuring. Figure & Ground On a screen experience, elements are either perceived as \"Figure\" — the distinct elements acquiring eye focus — or as \"Ground\" — whatever background behind the said figure. The best way to visualize such an effect is taking a look at a design wireframe. In a quick glance, without any content, you can easily figure out that in this interface lies a header, a sidebar, a main content and a decorative background. Having such an approach to design avoids losing people's attention and intuitively guides them to the main focus zone, which in our case, is this article you're reading. Closure The law of Closure consists in completing, closing a non-closed shape by the capacity of our brain alone. It means that whenever our eyes see an unfinished letter, picture or shape, our brain automatically perceive it as whole. Putting simply, we fill in the gaps. A straightforward example would be the signo navigation model used on mobile devices. In this project, sub-navigation is more consequent than top-level browsing. Instead of hiding quick-access links behind a button or a clunky interface, we designed sub-level navigations in a suggestive way. We suggest to people's mind that something is hidden behind this fading text, and that more content is available. Our brain automatically fills the missing pieces as long as they are correctly suggested. A good recommendation would be that suggestiveness shouldn't be more than 50% of what is originally seen. Proximity Proximity in Gestalt psychology tells us that the physically close elements form a group for our brain. It's used for categories, image & text groups, and title & paragraphs. It is often used in association with the law of similarity. Without explicitly indicating what this example represents, unconsciously your mind already determined that each of these recipes previews are grouped together following a particular order: an illustration, a label/category, a price range and a title. It perfectly illustrates how proximity works for associating UI elements together. Although, while grouping is recommended, it doesn't mean that white space has to suffer a decrease. On the contrary, your interface can only gain in clarity and comfort with white space. The golden subjective rule is to never use it too much so that proximity doesn't work anymore. Be also aware of avoiding small click targets: give links some padding. Some people with motor disabilities may have difficulties hitting small targets."
  },
  {
    "id": "ea7bdc44-8eb8-47df-b1c9-0ecfe9fc11c2",
    "title": "Design",
    "description": "Discover a new design thinking for accessibility.",
    "link": "https://signo.mathieudelvaux.be/design",
    "category": "design",
    "keywords": [
      "design"
    ],
    "content": "Screen accessibility resides in a joint effort from developers and you, designers. Many different aspects of designing an inclusive experience play an important role when combined together. Colors What may seem completely standard to some of us, may not to others. Color is one of those aspects we don't really think much about. Most designers probably don't have any color disability, and thus cannot really understand the need of a contrast thresold. Making a good-looking color palette is easy. Making an accessible color palette is not much harder. Color contrast is important in many ways: not everyone is able to see colors correctly, or any color at all. It is really important we don't base visual feedback on only sensory information. See true colors See true colors Writing From microcopy to kerning, it is crucial not to oversee those characteristics. You would be pretty disapointed to have crafted an experience that is unreadable to some people. Typography doesn't only rely on choosing the latest trendy font. Text legibility is an important factor which depends on your font size, font characteristics, kerning, leading, and your color palette as well. See? Everything connects. Write the right way Writing From microcopy to kerning, it is crucial not to oversee those characteristics. You would be pretty disapointed to have crafted an experience that is unreadable to some people. Typography doesn't only rely on choosing the latest trendy font. Text legibility is an important factor which depends on your font size, font characteristics, kerning, leading, and your color palette as well. See? Everything connects. Write the right way Write the right way Focus This can help anyone figure out your interface easier. There is no secret recipe for good design, but a good understanding of the Gestalt fundamentals can greatly help. Four different perception \"laws\" will help you craft better structured interfaces, which will be effortless to navigate with the eyes, or a keyboard as well. This practice follows what our brain originally does: creating structured sets. Focus on accessibility Focus on accessibility Motion Motion is a module that completes Focus. It adds a level of visual confort that ease the screen experience and which can reduce eye distraction, because of a focal focus. Focus Although, there is a motion thresold designers should not cross, in order to prevent motion sickness and avoid triggering visual sensitivities. Move on to motion Move on to motion"
  },
  {
    "id": "16c8c0c5-572c-436f-9546-064ba4ac331a",
    "title": "Motion",
    "description": "Move on to motion design while staying accessible.",
    "link": "https://signo.mathieudelvaux.be/design/motion",
    "category": "design",
    "keywords": [
      "design",
      "motion"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Motion Transition Transitions are a great way to provide people with comfortable focus to a certain element. Whether it is by entering the view or by changing screens, transitions also allow to have a better understanding of the information structure as long as they are purposeful. Attention To trigger focus to a particular point, you can use attention-seeking animations. A great use case for such motion is whenever a person completes an action within your interface, such as saving a setting, or failing a form completion. These attention-seekers should have a sparse use, otherwise they can potentially become distracting and annoying, and moreover loose their intended effect. Daniel Eden published Animate.css, a CSS framework featuring a set of pre-configured animations, including attention-seekers. Animate.css, a CSS framework Threshold But animations and transitions can also trigger motion sickness. So while figuring out your motion design, you should consider never having more than five seconds of animation, unless you provide a way to stop it. This is especially true for anything parallax-related scrolling or rotating carousels. Scroll-jacking should also be avoided. you provide a way to stop it Finally, having small movements in your interface will most likely not be an issue, but the bigger the animated element is, the worse feeling it can give to a motion-sick person. Relative moving distance should be kept small and have a speed and a direction which don't look off or are unexpected. And most importantly, you should limit any flickering to a maximum of 3 flashes a second in order to avoid seizures."
  },
  {
    "id": "fc080fe4-751b-44e0-9af8-6c11ec7de2a5",
    "title": "Writing",
    "description": "Discover how to improve your typography game for accessibility.",
    "link": "https://signo.mathieudelvaux.be/design/writing",
    "category": "design",
    "keywords": [
      "design",
      "writing"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Writing Typography Typography is essential to a good design. The first step to make an accessible choice is, of course, choosing a legible typeface. Sans-serif fonts are proven to be more legible because the level of detailing serifs offer can cause trouble for certain visually-impaired people. Proportions Another important factor resides in the visual aspect of your font. Proportions are crucial for legibility, and you should prefer fonts with characters that are easily identifiable. The X-height of a font, which represents the distance between the baseline and the midline of lower-case letters — typically a x, is also what makes it a legible font. Weight Font weights vary between Ultra Light and Ultra Black, but not all fonts include each set of weight. Standardized values defined by the W3C exist between 100 and 900. The key to balance weight and legibility is to avoid characters which become too thin for the eye. A good exercise for trying out your font weight is squinting your eyes to check if you can still see. Line height This is another essential. Mastering line height will not only make your text legible, but also readable, because of the increased visual comfort and appeal. Headings and copy require different values: depending on your font, for text copy, we recommend a line height value between 125% and 150%; headings require lower values because of increased font size, so as low as 100%. depending on your font, for text copy, we recommend a line height value between 125% and 150%; 125% 150% headings require lower values because of increased font size, so as low as 100%. 100% Text size It's a no-brainer, of course. Text size is really important for both legibility and readability. For general paragraph text, we recommend sticking to 1em, which is the default web sizing, equivalent to 16px. 1em 16px Further than setting text size, while designing your UX and integrating it, you should think about text sizing defined by the user. Zoomed text up to 200% should still be able to fit your interface without information truncating. Do These cards follow the content based on the zoom imposed by the user and information is still complete. Don't These cards don't take in consideration the browser zoom and the displayed text is only partial. Do These cards follow the content based on the zoom imposed by the user and information is still complete. Do These cards follow the content based on the zoom imposed by the user and information is still complete. Don't These cards don't take in consideration the browser zoom and the displayed text is only partial. Don't These cards don't take in consideration the browser zoom and the displayed text is only partial. Tone of voice While writing for accessibility-friendly content, keep in mind the audience you are addressing to. A few on-the-go tips would be: be precise and concise; avoid directional language like \"Select options in the sidebar\" but \"Select from these options\" instead; use information hierarchy, with headers like h1 for top-level, going down with h2 and h3, and so on; keep it simple; use meaningful link text, unlike \"click here\"; think of descriptive image alternatives. be precise and concise; avoid directional language like \"Select options in the sidebar\" but \"Select from these options\" instead; use information hierarchy, with headers like h1 for top-level, going down with h2 and h3, and so on; h1 h2 h3 keep it simple; use meaningful link text, unlike \"click here\"; think of descriptive image alternatives."
  },
  {
    "id": "7a4dbbc6-4c06-44cc-a7ff-33d0aef93100",
    "title": "Codex",
    "description": "desc",
    "link": "https://signo.mathieudelvaux.be/develop/codex",
    "category": "develop",
    "keywords": [
      "develop",
      "codex"
    ],
    "content": ""
  },
  {
    "id": "8b3a946b-861a-4934-a151-7c30776cc953",
    "title": "Develop",
    "description": "Check out some development resources for inclusiveness on native mobile apps and browsers.",
    "link": "https://signo.mathieudelvaux.be/develop",
    "category": "develop",
    "keywords": [
      "develop"
    ],
    "content": "For the sake of simplicity, we split the \"Develop\" section in two different parts: Develop for the Web implies anything which is rendered by a browser; Develop for Mobile here signifies native apps for iOS, Android and Windows Phone. Develop for the Web implies anything which is rendered by a browser; Develop for the Web Develop for Mobile here signifies native apps for iOS, Android and Windows Phone. Develop for Mobile Develop for the Web Developing an accessible web experience requires many small different aspects coming together. It starts from figuring out how to use a screen reader to making usable navigation. Browsers and Operating Systems are already full of features and operate according to standards. You only have to stick to these rules to go the easy path. And if you have to leave this path, there are ways to get you back on track. Browse web development Browse web development Develop for Mobile Native mobile development is basically platform-dependant, which means that according to which Operating System you will be developing for, the how tos will heavily differ. When developing an app, you generally don't limit yourself to one OS. Thus, instead of limiting our decumentation to one OS or reinventing the wheel, we decided to offer direct linking to relevant documentation in line with each operating system. React to mobile SDKs Develop for Mobile Native mobile development is basically platform-dependant, which means that according to which Operating System you will be developing for, the how tos will heavily differ. When developing an app, you generally don't limit yourself to one OS. Thus, instead of limiting our decumentation to one OS or reinventing the wheel, we decided to offer direct linking to relevant documentation in line with each operating system. React to mobile SDKs React to mobile SDKs"
  },
  {
    "id": "aa653842-1740-494d-ac58-8739faacacc2",
    "title": "Mobile – Develop",
    "description": "Access the native mobile apps SDKs from Apple, Android or Windows.",
    "link": "https://signo.mathieudelvaux.be/develop/mobile",
    "category": "develop",
    "keywords": [
      "develop",
      "mobile"
    ],
    "content": ""
  },
  {
    "id": "1a060447-4dec-4708-99a9-2d8091a27e5a",
    "title": "Aria – Web",
    "description": "Find out how Aria can help you build better online experiences.",
    "link": "https://signo.mathieudelvaux.be/develop/web/aria",
    "category": "develop",
    "keywords": [
      "develop",
      "web",
      "aria"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Aria It's actually WAI-ARIA, and it stands for Web Accessibility Initiative - Accessible Rich Internet Applications. This is a specification, currently being written by the W3C, which defines additional sets of HTML attributes that provide additional semantics when lacking. Roles Roles are at the top of the specification and can come very handy for extending basic semantics. They are defined by adding a role=* attribute. Note that not all roles are applicable to each elements, especially when it is implicitly declared: for example, a <aside> tag has an implicit role value of role=\"complementary\" and only allows feed, note, presentation, region or search. role=* not all roles are applicable to each elements <aside> role=\"complementary\" feed note presentation region search A good use-case example would be our Color Contrast tool, which features generated color palettes. Color Contrast tool <div role=\"button\" class=\"hue\"> <span class=\"hue__ref\">#FFF</span> <span class=\"hue__clipboard\">Copied to clipboard</span> <div class=\"hue__btns\"> <button class=\"hue__btn\">Format</button> <button class=\"hue__btn\">Copy</button> </div> </div> <div role=\"button\" class=\"hue\"> <span class=\"hue__ref\">#FFF</span> <span class=\"hue__clipboard\">Copied to clipboard</span> <div class=\"hue__btns\"> <button class=\"hue__btn\">Format</button> <button class=\"hue__btn\">Copy</button> </div> </div> The <div> container has to be clickable in order to apply the selected hue to the background. And in this case, the use of a <button> element is out of the equation, because they don't allow block-level elements inside them. The only solution is to turn the element into an augmented button, which also works with screen readers, focus states, tab navigation, etc. <div> <button> Roles can also be used to define landmarks in a web page. Whenever you're using a screen reader, it can summary the layout of a page using landmarks. Try this on VoiceOver by pressing the VoiceOver key + U. This page structure, without specified landmarks would be: banner — which stands for <header>; navigation — which stands for <nav>; main — which is self-explanatory; complementary — which stands for <aside>; banner — which stands for <header>; <header> navigation — which stands for <nav>; <nav> main — which is self-explanatory; complementary — which stands for <aside>; <aside> Although, we're missing a lot of the structure information. A great way to fix this would be to add corresponding roles to the important landmarks. Let's add to this list our search engine and our important side navigation: <header> <nav> <form role=\"search\"> … </form> </nav> </header> <main> <div role=\"menubar\"> <!-- This role defines our div as a presentation of menu that usually remains visible --> <aside> <nav aria-label=\"Breadcrumb\"> <!-- This labels this navigation landmark as a breadcrumb --> Home > Category > Content </nav> <nav aria-label=\"Table of content\"> <!-- This labels this navigation landmark as a table of content --> … </nav> </aside> <article role=\"article\"> <!-- This roles sets our article, the main content of this page, as a landmark --> </article> </div> </main> <header> <nav> <form role=\"search\"> … </form> </nav> </header> <main> <div role=\"menubar\"> <!-- This role defines our div as a presentation of menu that usually remains visible --> <aside> <nav aria-label=\"Breadcrumb\"> <!-- This labels this navigation landmark as a breadcrumb --> Home > Category > Content </nav> <nav aria-label=\"Table of content\"> <!-- This labels this navigation landmark as a table of content --> … </nav> </aside> <article role=\"article\"> <!-- This roles sets our article, the main content of this page, as a landmark --> </article> </div> </main> And now, our structure summarized by a screen reader looks like this: banner; navigation; search; main; complementary; breadcrumb navigation; article. banner; navigation; search; main; complementary; breadcrumb navigation; article. And that allows screen reader users to quickly browse your website \"at a glance\". States & properties Aria defines a list of multiple properties that can be applied to an HTML element. Here's the current specification, considering you prefix the defined property with aria-. aria- atomic Set to \"true\", the aria-atomic attribute tells screen readers to read out the entire element contents as one atomic unit, not just the bits that were updated. Usually linked to aria-live. aria-atomic controls It creates a cause and effect relationship between the identified element(s) whose content is controlled by the current element. A good example would be the buttons from image slider controlling the image. describedby This is another labeling technique different than HTML labels or aria-label. You can actually use an element to describe another element, such as an input or an image. This is this exact technique we use in the Design documentation for describing example images in a figure element with figcaption. Design documentation figure figcaption disabled Most browsers just skip past disabled fields, and thus won't be read by screen readers. It's a better UX pattern to notify the screen reader that this particular field exists, but is not available, by setting this property to true. true dropeffect Related to drag-and-drop, this property indicates what functions can be performed when the dragged object is released on the drop target. This property only accepts a defined list of tokens: copy, move, link, execute, popup. copy move link execute popup flowto It allows a screen reader to be given a different reading order by giving it the next element which has to be read. grabbed Also related to drag-and-drop, this state indicates that the current element is in the state of a drag operation. haspopup This property indicates that the current element has a popup menu or an underlying menu. A simple example is a dropdown list navigation. <ul> <li>Menu element 1</li> <li aria-haspopup=\"true\"> Menu element w/ dropdown <ul> <li>Sub-element 1</li> <li>Sub-element 2</li> <li>Sub-element 3</li> </ul> </li> <li>Menu element 3</li> </ul> <ul> <li>Menu element 1</li> <li aria-haspopup=\"true\"> Menu element w/ dropdown <ul> <li>Sub-element 1</li> <li>Sub-element 2</li> <li>Sub-element 3</li> </ul> </li> <li>Menu element 3</li> </ul> hidden Once this property is set to true, the screen reader will automatically skip the element and not read it. This can be useful for inline images or SVGs whose purpose is only decoration. For people using inline icon fonts, it may also be useful to use the hidden property on the element containing the character. invalid The invalid property allows to be a bit more specific as to why a field is invalid. It uses a list of the following tokens as valid values: grammar, spelling, false and true. grammar spelling false true label Interface elements can sometimes only be graphic, and not have any content. This is when aria-label comes in the play. We used this technique on a few buttons containing no text. <button class=\"js-renew\" aria-label=\"Generate new accessible colors\"></button> <button class=\"js-renew\" aria-label=\"Generate new accessible colors\"></button> labelledby It is almost exactly the same as a the label property. The only difference residing in the fact that if the labelling text is visible on screen, it should be defined by this property. <div role=\"dialog\" aria-labelledby=\"diagTitle\"> <h2 id=\"diagTitle\">An error occured</h2> … </div> <div role=\"dialog\" aria-labelledby=\"diagTitle\"> <h2 id=\"diagTitle\">An error occured</h2> … </div> live Many websites feature infinite scrolling techniques, such as Twitter or Facebook. Although, screen readers cannot be aware of dynamically loaded content, whether it is through network request or DOM manipulation. Setting this property to true to the container holding your generated content will allow the screen reader to read the new content. true owns Correct semantics always imply a parent/child relationship. But in some cases, it might not be possible to create such a DOM relationship. Here's a great and simple example: <ul> <li aria-owns=\"fruits\">Fruit</li> <li aria-owns=\"veggies\">Vegetables</li> </ul> <ul id=\"fruits\"> <li>Apples</li> <li>Bananas</li> <li>Cherries</li> </ul> <ul id=\"veggies\"> <li>Aubergine</li> <li>Brussels sprouts</li> <li>Carrots</li> </ul> <ul> <li aria-owns=\"fruits\">Fruit</li> <li aria-owns=\"veggies\">Vegetables</li> </ul> <ul id=\"fruits\"> <li>Apples</li> <li>Bananas</li> <li>Cherries</li> </ul> <ul id=\"veggies\"> <li>Aubergine</li> <li>Brussels sprouts</li> <li>Carrots</li> </ul> relevant Tied to aria-live, this property helps telling screen readers what happened in a live-region change. It accepts a list of tokens which can be combined: additions, removals, text and all. additions removals text all Other properties Above were the main properties you may use on any HTML element. However, more specific properties for specific elements exist as well. They are all defined in Section 6.6 of the WAI - ARIA Specification. Section 6.6 of the WAI - ARIA Specification"
  },
  {
    "id": "52859840-6fcd-487a-abd8-5d8854b35ec4",
    "title": "Forms – Web",
    "description": "Read on how to make your HTML forms accessibility-friendly.",
    "link": "https://signo.mathieudelvaux.be/develop/web/forms",
    "category": "develop",
    "keywords": [
      "develop",
      "web",
      "forms"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Forms Logic It may seem like an idiotic tip, but it's crucial, and not only for accessibility. We recommend first writing down all the elements you need to require from your user. Once that's done, then re-think your choices: check if every single field you think is necessary is indeed mandatory. After cutting down unnecessary fields, let's chop off redundant fields once again: if possible, merge fields such as First & Last Name, or a Birthdate date selector. Try to be flexible to what you can accept in a field, make use of autocomplete, group related elements, etc. The less effort is required to fulfill a task, the better it is. <fieldset> <div class=\"wrapper\"> <label for=\"name\">Full name</label> <input type=\"text\" name=\"name\" id=\"name\"> </div> <div class=\"wrapper\"> <label for=\"email\">Email</label> <input type=\"email\" name=\"email\" id=\"email\"> </div> </fieldset> <fieldset> <div class=\"wrapper\"> <label for=\"name\">Full name</label> <input type=\"text\" name=\"name\" id=\"name\"> </div> <div class=\"wrapper\"> <label for=\"email\">Email</label> <input type=\"email\" name=\"email\" id=\"email\"> </div> </fieldset> Keyboard Many users use keyboard navigation while filling forms. It's much faster and easier to press Tab, or a mobile equivalent, than clicking on each field. And it's also how screen reader users browse the web too. Tab In order for their browsing experience to be positive, make sure you code your inputs following the correct navigation flow. Be also very careful when using JavaScript to hijack keyboard events: the initial behavior you replace must have the same feeling of \"it was supposed to happen this way\". Have an example with our search input fields, where we visually changed users expectations — the input is actually smaller and without style in a styled container — but maintained logic behavior: when you click on the container, the focus is automatically set to the input. Test yourself anywhere on signo. <form class=\"js-search\" role=\"search\"> <div class=\"js-container\"> <!-- Clicking anywhere in this container will focus the input --> <svg aria-hidden=\"true\" width=\"18\" height=\"18\">…</svg> <!-- Notice how the inline SVG was hidden from screen readers as it is only decorative --> <input class=\"js-input\" type=\"search\" aria-label=\"Search through the signo website\" placeholder=\"What do you want to make?\" autocorrect=\"off\" spellcheck=\"false\" autocomplete=\"off\" name=\"search\" > <button class=\"js-searchCancel\" type=\"button\" aria-label=\"Clear Search\"></button> <!-- This button element is empty but still read by screen readers thanks to a specific aria-label --> </div> <ol class=\"js-searchResults\"> </ol> </form> <form class=\"js-search\" role=\"search\"> <div class=\"js-container\"> <!-- Clicking anywhere in this container will focus the input --> <svg aria-hidden=\"true\" width=\"18\" height=\"18\">…</svg> <!-- Notice how the inline SVG was hidden from screen readers as it is only decorative --> <input class=\"js-input\" type=\"search\" aria-label=\"Search through the signo website\" placeholder=\"What do you want to make?\" autocorrect=\"off\" spellcheck=\"false\" autocomplete=\"off\" name=\"search\" > <button class=\"js-searchCancel\" type=\"button\" aria-label=\"Clear Search\"></button> <!-- This button element is empty but still read by screen readers thanks to a specific aria-label --> </div> <ol class=\"js-searchResults\"> </ol> </form> container.addEventListener('click', () => { input.focus(); // Here we add visual feedback for focus container.classList.add('active'); }); container.addEventListener('click', () => { input.focus(); // Here we add visual feedback for focus container.classList.add('active'); }); Elements You should always remain to existing tags like <input>, <select>, <radio>, etc., and set those elements with corresponding labels. The most basic functional example is: <input> <select> <radio> <label for=\"name\">Name</label> <input id=\"name\" type=\"text\" name=\"textfield\"> <label for=\"name\">Name</label> <input id=\"name\" type=\"text\" name=\"textfield\"> It's already a pretty good base. You can only go in the right direction if you stop here. But now, let's group together some related fields with <fieldset>. Let's say we have a list of preferences for some services: <fieldset> <fieldset> <legend>How can we reach you?</legend> <input id=\"textmsg\" type=\"checkbox\" name=\"contact\" value=\"textmsg\"> <label for=\"textmsg\">Text Messages</label> <input id=\"email\" type=\"checkbox\" name=\"contact\" value=\"email\"> <label for=\"email\">Email</label> <input id=\"push\" type=\"checkbox\" name=\"contact\" value=\"push\"> <label for=\"push\">Push Notifications</label> </fieldset> <fieldset> <legend>How can we reach you?</legend> <input id=\"textmsg\" type=\"checkbox\" name=\"contact\" value=\"textmsg\"> <label for=\"textmsg\">Text Messages</label> <input id=\"email\" type=\"checkbox\" name=\"contact\" value=\"email\"> <label for=\"email\">Email</label> <input id=\"push\" type=\"checkbox\" name=\"contact\" value=\"push\"> <label for=\"push\">Push Notifications</label> </fieldset> Try out this code on your own with your screen reader, and see how great it is to have a nice code structure. Grouping is particularly recommended for radio buttons and checkboxes. One last step to push the limits and come close to a perfect UX form experience is to use labels, sure, but combined with HTML placeholders and groups. Labels name the current field, and placeholders tell the person reading how to format their information. <form autocomplete=\"on\"> <fieldset> <div> <label for=\"name\">Full name</label> <input type=\"text\" name=\"name\" id=\"name\" spellcheck=\"false\" maxlength=\"80\" placeholder=\"First name Last name\"> </div> <div> <label for=\"email\">Email</label> <input type=\"email\" name=\"email\" id=\"email\" spellcheck=\"false\" maxlength=\"254\" placeholder=\"hello@me.com\"> </div> </fieldset> <fieldset> <div> <label for=\"address\">Address</label> <input type=\"text\" name=\"address\" id=\"address\" spellcheck=\"false\" placeholder=\"Internet Street, 42\"> </div> <div> <label for=\"postal_code\">Postal code</label> <input type=\"text\" name=\"postal_code\" id=\"postal_code\" spellcheck=\"false\" placeholder=\"1030\"> </div> </fieldset> </form> <form autocomplete=\"on\"> <fieldset> <div> <label for=\"name\">Full name</label> <input type=\"text\" name=\"name\" id=\"name\" spellcheck=\"false\" maxlength=\"80\" placeholder=\"First name Last name\"> </div> <div> <label for=\"email\">Email</label> <input type=\"email\" name=\"email\" id=\"email\" spellcheck=\"false\" maxlength=\"254\" placeholder=\"hello@me.com\"> </div> </fieldset> <fieldset> <div> <label for=\"address\">Address</label> <input type=\"text\" name=\"address\" id=\"address\" spellcheck=\"false\" placeholder=\"Internet Street, 42\"> </div> <div> <label for=\"postal_code\">Postal code</label> <input type=\"text\" name=\"postal_code\" id=\"postal_code\" spellcheck=\"false\" placeholder=\"1030\"> </div> </fieldset> </form>"
  },
  {
    "id": "adfc0881-5a66-4677-8cf1-b4608fe8657a",
    "title": "Web – Develop",
    "description": "Develop more inclusive online experiences.",
    "link": "https://signo.mathieudelvaux.be/develop/web",
    "category": "develop",
    "keywords": [
      "develop",
      "web"
    ],
    "content": ""
  },
  {
    "id": "0103b3bf-f499-46b7-9455-9e2ac1256534",
    "title": "Navigation – Web",
    "description": "An howto on creating a perfect navigation experience.",
    "link": "https://signo.mathieudelvaux.be/develop/web/navigation",
    "category": "develop",
    "keywords": [
      "develop",
      "web",
      "navigation"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Navigation Markup What makes a menu accessible is basically keeping it to semantics and elements basics. Navigations should always be tucked in a <nav> tag, and nested in lists, just like this: <nav> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/design\">Design</a></li> <li><a href=\"/develop\">Develop</a></li> </ul> <ul> <li><a href=\"/\">Home</a></li> <li><a href=\"/design\">Design</a></li> <li><a href=\"/develop\">Develop</a></li> </ul> There you go, we just did the most basic and fully accessible navigation. Keep in mind that the simplest the markup, the more accessible it is. The last required criteria is that your navigation should not rely on JavaScript, simply because some users disable it. For mobile toggles, like hamburger menus ☰, it's recommended to use a <button> element. ☰ <button> <button class=\"nav__toggle\" type=\"button\" aria-label=\"Toggle Navigation\" aria-controls=\"navigation\"> <span></span> </button> <div id=\"navigation\" class=\"nav__mobile\"> <ul> <li><a href=\"/design\">Design</a></li> <li><a href=\"/develop\">Develop</a></li> <li><a href=\"/tools\">Tools</a></li> <li><a href=\"/learn\">Learn</a></li> </ul> </div> <button class=\"nav__toggle\" type=\"button\" aria-label=\"Toggle Navigation\" aria-controls=\"navigation\"> <span></span> </button> <div id=\"navigation\" class=\"nav__mobile\"> <ul> <li><a href=\"/design\">Design</a></li> <li><a href=\"/develop\">Develop</a></li> <li><a href=\"/tools\">Tools</a></li> <li><a href=\"/learn\">Learn</a></li> </ul> </div> .nav__toggle { outline: 0; border: 0; background-image: none; background-color: transparent; box-shadow: none; padding: 0; width: 48px; height: 48px; position: relative; right: -12px; } .nav__toggle span { width: 22px; height: 2px; background-color: black; border-radius: 2px; display: block; margin: 0 auto; position: relative; } .nav__toggle span::before, .nav__toggle span::after { content: \"\"; width: 14px; height: 2px; background-color: black; border-radius: 2px; display: block; margin: 0 auto; position: absolute; top: -6px; } .nav__toggle span::after { top: auto; bottom: -6px; right: 0; } .nav__toggle { outline: 0; border: 0; background-image: none; background-color: transparent; box-shadow: none; padding: 0; width: 48px; height: 48px; position: relative; right: -12px; } .nav__toggle span { width: 22px; height: 2px; background-color: black; border-radius: 2px; display: block; margin: 0 auto; position: relative; } .nav__toggle span::before, .nav__toggle span::after { content: \"\"; width: 14px; height: 2px; background-color: black; border-radius: 2px; display: block; margin: 0 auto; position: absolute; top: -6px; } .nav__toggle span::after { top: auto; bottom: -6px; right: 0; } As you see, our <button> only contains a span used for creating a hamburger icon. You can also notice that our toggle features a label, replacing the empty button content for screen readers, as well as an aria-controls property indicating that this element controls the navigation container. <button> aria-controls Links At all costs, avoid text links which means nothing when being read alone. The worst scenario is basically: <a href=\"#\">More</a> <a href=\"#\">More</a> It doesn't make any sense for screen reader users. And if this choice was made for design decisions, we can only recommend you to try labeling your link with Aria: <a href=\"#\" aria-label=\"Read more about this news\">More</a> <a href=\"#\" aria-label=\"Read more about this news\">More</a> Skip links We recommend using this navigation pattern to allow people to jump, or \"skip\", over page elements. It's one of the most basic and useful tweaks for increasing the usability of your page for screen-readers and other assistive technologies. Whenever a person using a screen reader loads a web page, the default focus position is the first element in the <body> tag. If you do not set a skip link, users will have to cycle through navigation and any other elements coming before the main content. These skip tweaks do not need to be visible, so they can be hidden for regular users. Here's how we do on signo: <body> <a href=\"#maincontent\" class=\"sr\">Skip to main content</a> … <main id=\"maincontent\"></main> <a href=\"#maincontent\" class=\"sr\">Skip to main content</a> … <main id=\"maincontent\"></main> .sr { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0; } .sr { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0; } This .sr class can be used to hide any other elements which should only be visible to screen readers. .sr"
  },
  {
    "id": "fc71b0bf-9c44-45a5-8a74-85cde0805429",
    "title": "Screen Readers – Web",
    "description": "Check out the basics of using a screen reader for development purposes.",
    "link": "https://signo.mathieudelvaux.be/develop/web/screenreaders",
    "category": "develop",
    "keywords": [
      "develop",
      "web",
      "screenreaders"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Screen Readers What it is A screen reader will be your best friend in the world of accessibility development. It's the generic term for a program that helps vision-impaired people to use a computer. In other words, a screen reader will literally \"read\" out loud the content of page elements to person using it. Some systems like Android™, iOS™ and macOS™ include an internal screen reader, but there are over 15 screen readers on the market today which can be used on multiple operating systems. The mostly used ones are available in our Resource section. our Resource section How it works So, a screen reader program has hundreds of commands which can be summoned by the impaired person to find out what the computer screen is showing. For the sake of simplicity and because screen readers all feature common patterns, we will mainly focus on VoiceOver. There are two ways of using it while browsing the web: whether by grouping items — e.g. an ul will be one group and you can decide to enter a group by pressing the down arrow — or whether by DOM Order — this method will automatically go down the DOM tree, so li elements will be read after reaching the ul. ul li ul See, while browsing through DOM nodes, VoiceOver highlights the current zone and describes what it is by voice, but also by text in the bottom corner. How to use it First time users will obviously be lost. But after playing for a few minutes with keyboard navigation, you easily get the hang of it. Start off VoiceOver by pressing the cmd ⌘ + fn + F5 keys together to bring the VoiceOver dialog. And boom! That's it, you're using an on-screen reader. To stop it, use the same key combination. cmd ⌘ fn F5 Next step is getting used to commands. Basically, you only need to move around using the keyboard arrows and follow the VoiceOver instructions. There is still another option to web browsing with VoiceOver: the rotor, which is a list of navigational elements present on the current page. This is a little bit more advanced, but try opening it by pressing the ctrl + alt ⌥ + U. Once the rotor is activated, you can switch its screens by using the left and right arrows, and up and down for the current screen. The rotor will basically display your document structure, allowing users to jump quickly to relevant content. ctrl alt ⌥ U One last key: ↵. Obviously, use it to select links, buttons, etc. and highlighted rotor elements. ↵"
  },
  {
    "id": "d48e7b51-88a8-4781-969f-fbf04dc30d94",
    "title": "Semantic – Web",
    "description": "Writing better code for better experiences.",
    "link": "https://signo.mathieudelvaux.be/develop/web/semantic",
    "category": "develop",
    "keywords": [
      "develop",
      "web",
      "semantic"
    ],
    "content": "Last updated June 1, 2017 June 1, 2017 Semantic The right tags There is no golden rule for using elements. But navigation is navigation, lists are lists, links are links, buttons are buttons, etc. Just know your tags and don't reinvent the wheel. Title Each page should have its own <title>, usually starting from the most specific to the most general, like: <title> <title>Semantic – Web - Develop | signo</title> <title>Semantic – Web - Develop | signo</title> Language If you specify the natural language of your page, the screen reader software will be able to use the correct pronunciation rules. <html lang=\"en\"> <html lang=\"en\"> Images It's acquired to us that images look like how we see them. Which is as logic as it can get. But some people with certain impairments cannot see clearly, and rely on screen readers to read them what's in the image. And unless you are Facebook and own machine learning algorithms which can automatically describe the content of an image — that was long to read sorry, disabled users rely on you providing adequate description of an image. Think of it as declarative information. <!-- This is read by screen readers as \"Image\" --> <img src=\"/assets/img/dumb.gif\"> <!-- This is not read by screen readers --> <img src=\"/assets/img/good.jpg\" aria-hidden=\"true\"> <!-- This is read by screen readers using the alt content --> <img src=\"/assets/img/excellent.svg\" alt=\"Screenshot of VoiceOver iterating through DOM elements in Safari\"> <!-- This is read by screen readers as \"Image\" --> <img src=\"/assets/img/dumb.gif\"> <!-- This is not read by screen readers --> <img src=\"/assets/img/good.jpg\" aria-hidden=\"true\"> <!-- This is read by screen readers using the alt content --> <img src=\"/assets/img/excellent.svg\" alt=\"Screenshot of VoiceOver iterating through DOM elements in Safari\"> Structure When integrating a design, we recommend starting by writing pure HTML without any styling. This way, you can see the natural flowing of your content, which will not change after styling anyway — even if you use flex with order. flex order Keep in mind that screen readers follow the DOM order, and ignore styling, except for content, which is readable. content It is important to use content hierarchy to format your content. You should use the correct sectioning with headings, just like this: <header> <h1 class=\"logo\">signo</h1> <nav>...</nav> </header> <main role=\"main\"> <h1>Heading</h1> <p>A random paragraph under heading 1</p> <section> <h2>A section title</h2> <p>Have a look at this</p> </section> <article> <h2>How to structure HTML</h2> <p>...</p> <aside> Complementary information </aside> </article> </main> <footer> <ul> <li>Page 1</li> … </ul> </footer> <header> <h1 class=\"logo\">signo</h1> <nav>...</nav> </header> <main role=\"main\"> <h1>Heading</h1> <p>A random paragraph under heading 1</p> <section> <h2>A section title</h2> <p>Have a look at this</p> </section> <article> <h2>How to structure HTML</h2> <p>...</p> <aside> Complementary information </aside> </article> </main> <footer> <ul> <li>Page 1</li> … </ul> </footer>"
  },
  {
    "id": "1cb6db94-776d-41cc-bd12-62255a6003b8",
    "title": "Impairments",
    "description": "Understand what can get diminish people when using screens.",
    "link": "https://signo.mathieudelvaux.be/learn/impairments",
    "category": "learn",
    "keywords": [
      "learn",
      "impairments"
    ],
    "content": "There are many possible disabilities or impairments. These can be related to vision, color perception, cognition, literacy, speech or hearing, and can also occur simultaneously. They can also have different degrees of severity because they can totally disable an acquired sense. But, thankfully for us, they can be grouped together in great categories. Visual We are all so acclimated to seeing individuals wear glasses or contact focal points that we don't consider poor vision as an inability. Huge numbers of us have a natural vision so defective that there is no doubt we would have an inability were it not for our glasses. Others of us have visual handicaps that are not all that effectively corrected, nor so effortlessly overlooked. Another class of visual incapacity, low vision, is a typical condition among the elderly, however more youthful people may likewise have this handicap, regardless of whether because of hereditary qualities, traumatic wounds, or ailments. The last enormous class of visual handicap is partial blindness, however it is most likely an exaggeration to call partial blindness an inability, since the conditions under which partial blindness is a genuine impediment are few. Low vision The visual keenness of individuals with low vision changes broadly when all is said in done, low vision is characterized as a condition in which a man's vision can't be completely remedied by glasses, in this manner meddling with every day exercises, for example, perusing and driving. Low vision is more typical among the elderly, yet it can happen in people of all ages accordingly of such conditions as macular degeneration, glaucoma, diabetic retinopathy, or waterfalls. Each of these conditions causes diverse sorts of impacts in a man's vision. The most widely recognized innovation that individuals with low vision utilize is the screen magnifier. Locales with low difference can be hard to peruse for individuals with low vision. Some ineffectively composed locales on the web have awful shading blends, for example, blue connections on dark foundations, red content on green foundations, or different mixes that are difficult on the eyes for anybody, yet particularly not for individuals with low vision. A few people with low vision will change the settings in their working framework as well as program to amplify the content, as well as to build the difference of the content in connection to the foundation. A few people get a kick out of the chance to have a dark foundation with white or yellow content. Color-blindness The most well-known general classification of visual impairment is regularly called red-green partial blindness, yet this does not imply that these individuals can't see reds or greens. It would be simple for somebody with a red-green lack to differentiate between a light green and a dim red, for instance. On the off chance that the red is around as dim as the green, there is a more noteworthy probability that the hues will be confounded. There is some confirmation that individuals with red-green visual impairment see reds and greens as yellows, oranges and beiges. Blindness Clearly, individuals who are visually impaired are not ready to see things and the individuals who are not visually impaired. In spite of the fact that it's actual that most visually impaired individuals do have some level of vision, in every practical sense, one can state that individuals who are visually impaired don't utilize their eyes to get to the web, since whatever vision they have is not sufficiently helpful for this sort of errand. This implies a PC screen and mouse would be substantially less helpful to a man who is visually impaired. It isn't so much that visually impaired individuals are unequipped for moving or clicking a mouse; it's quite recently that they don't know where to move it or when to snap it, since they can't perceive what's on the screen. Motor Mobility impairment incorporates physical deformities, including upper or lower limb loss or impairment, poor manual dexterity, and damage to one or more organs of the body. There are countless individuals who experience the ill effects of minor to different genuine vision wounds or hindrances. Individuals who are just mostly hard of hearing can once in a while make utilization of portable amplifiers to enhance their listening ability capacity. Physical disability can likewise be credited to scatters bringing on, among others, rest lack, ceaseless weakness, incessant agony, and seizures. Diseases Cerebral paralysis is a harm to the cerebrum, bringing about diminished muscle control. Normal qualities of cerebral paralysis incorporate muscle snugness or fit, automatic development, and debilitated discourse. They can for the most part utilize a keyboard, or an adaptive keyboard, however more slowly than people without cerebral paralysis. General keyboards can be adjusted to this same reason by the utilization of keyboard overlays. Muscular dystrophy is a hereditary issue in which the muscle proteins genes are damaged. It is described by the dynamic degeneration of the muscles. Solid dystrophy can influence individuals at any age, however is most regular in kids. People with mild muscular dystrophy can carry on with a typical life expectancy, while people with more serious cases can die in their teenage years or mid 20s. The assistive technologies utilized by people with this disease rely on upon the seriousness of the condition, yet for the most part incorporate similar innovations such as head wands, mouth sticks, adaptive keyboard, voice recognition, etc. In people with multiple sclerosis, the myelin (a layer of greasy tissue which encompasses nerve filaments) disintegrates, rendering the nerve strands unequipped for sending signals from the focal sensory system to the muscles of the body. The milder instances of multiple sclerosis can bring about at least one of the accompanying side effects: tremors, shortcoming, deadness, shaky strolling, spasticity, slurred discourse, muscle firmness, or disabled memory. Extreme cases can bring about incomplete or finish loss of motion. Not all people with multiple sclerosis encounter the majority of the indications and, curiously, a similar individual may encounter distinctive arrangements of side effects at various circumstances. Parkinson is a confusion of the focal sensory system that causes wild tremors or potentially inflexibility in the muscles. People with cutting edge instances of Parkinson's Disease will most likely be unable to utilize a mouse by any stretch of the imagination, and some can't utilize a keyboard. Now and then the voice is influenced too, so that voice recognition programming is impossible, however a great many people with Parkinson have voices that are effectively caught on. Parkinson's Disease is destined to happen sometime down the road, yet can affect more youthful people too. Trauma Loss of motion of the legs and arms is called quadriplegia. People with paraplegia for the most part have no trouble getting to the Internet. People with quadriplegia may have huge challenges, contingent upon the sort and seriousness of the damage. In spite of these constraints, people with quadriplegia can make utilization of assistive advances that enable them to get to the usefulness of their PCs. Somebody who has lost one hand will even now have the capacity to utilize the Internet without an excessive amount of trouble. Be that as it may, somebody who has lost both appendages may need to make utilization of different innovations, for example, the ones utilized by people with quadriplegia: head wands, mouth sticks, voice recognition programming, and so on. Motor Mobility impairment incorporates physical deformities, including upper or lower limb loss or impairment, poor manual dexterity, and damage to one or more organs of the body. There are countless individuals who experience the ill effects of minor to different genuine vision wounds or hindrances. Individuals who are just mostly hard of hearing can once in a while make utilization of portable amplifiers to enhance their listening ability capacity. Physical disability can likewise be credited to scatters bringing on, among others, rest lack, ceaseless weakness, incessant agony, and seizures. Diseases Cerebral paralysis is a harm to the cerebrum, bringing about diminished muscle control. Normal qualities of cerebral paralysis incorporate muscle snugness or fit, automatic development, and debilitated discourse. They can for the most part utilize a keyboard, or an adaptive keyboard, however more slowly than people without cerebral paralysis. General keyboards can be adjusted to this same reason by the utilization of keyboard overlays. Muscular dystrophy is a hereditary issue in which the muscle proteins genes are damaged. It is described by the dynamic degeneration of the muscles. Solid dystrophy can influence individuals at any age, however is most regular in kids. People with mild muscular dystrophy can carry on with a typical life expectancy, while people with more serious cases can die in their teenage years or mid 20s. The assistive technologies utilized by people with this disease rely on upon the seriousness of the condition, yet for the most part incorporate similar innovations such as head wands, mouth sticks, adaptive keyboard, voice recognition, etc. In people with multiple sclerosis, the myelin (a layer of greasy tissue which encompasses nerve filaments) disintegrates, rendering the nerve strands unequipped for sending signals from the focal sensory system to the muscles of the body. The milder instances of multiple sclerosis can bring about at least one of the accompanying side effects: tremors, shortcoming, deadness, shaky strolling, spasticity, slurred discourse, muscle firmness, or disabled memory. Extreme cases can bring about incomplete or finish loss of motion. Not all people with multiple sclerosis encounter the majority of the indications and, curiously, a similar individual may encounter distinctive arrangements of side effects at various circumstances. Parkinson is a confusion of the focal sensory system that causes wild tremors or potentially inflexibility in the muscles. People with cutting edge instances of Parkinson's Disease will most likely be unable to utilize a mouse by any stretch of the imagination, and some can't utilize a keyboard. Now and then the voice is influenced too, so that voice recognition programming is impossible, however a great many people with Parkinson have voices that are effectively caught on. Parkinson's Disease is destined to happen sometime down the road, yet can affect more youthful people too. Trauma Loss of motion of the legs and arms is called quadriplegia. People with paraplegia for the most part have no trouble getting to the Internet. People with quadriplegia may have huge challenges, contingent upon the sort and seriousness of the damage. In spite of these constraints, people with quadriplegia can make utilization of assistive advances that enable them to get to the usefulness of their PCs. Somebody who has lost one hand will even now have the capacity to utilize the Internet without an excessive amount of trouble. Be that as it may, somebody who has lost both appendages may need to make utilization of different innovations, for example, the ones utilized by people with quadriplegia: head wands, mouth sticks, voice recognition programming, and so on. Cognitive Cognitive impairments include having difficulty or deficits with memory, problem-solving, attention, reading, linguistic, and verbal comprehension, Math comprehension, visual comprehension. There are two approaches to classify cognitive handicaps: by practical inability or by clinical incapacity. Clinical determinations of cognitive impairments incorporate autism, Down Syndrome, traumatic brain injury, and even dementia. Clinical diagnoses might be helpful from a medical point of view for treatment, yet for the reasons for web openness, grouping cognitive handicaps by functional incapacity is more valuable. Useful incapacities disregard the restorative or behavioral reasons for the inability and rather concentrate on the subsequent capacities and difficulties."
  },
  {
    "id": "064b74ca-cd78-4a66-9237-2044c6407906",
    "title": "Learn",
    "description": "Know your way around universal inclusiveness.",
    "link": "https://signo.mathieudelvaux.be/learn",
    "category": "learn",
    "keywords": [
      "learn"
    ],
    "content": "Knowledge should be as open as can be. This is why everything in the content from signo is open too. And we want to share anything we know about disabilities and what is required from you if you own a website. Impairments There are many possible disabilities or impairments. These range from mobility to vision limitations and can also be combined. Impairments also have different degrees of severity because they can totally disable an acquired sense. Different disabilities also mean different types of tools and different practices for each one. Thankfully, they can be grouped in general categories for easier addressing. Discover impairments Discover impairments Laws Whenever you make a website, you fall under the current legislation of your country. You may be required to comply to the current standards, or you or your company could end up being prosecuted for discrimination. It's a bit far-fetched, but prevention is better than cure. Please mind we do not give legal advice, but we orient ourselves as providing awareness and useful legal resources. Discover international laws Laws Whenever you make a website, you fall under the current legislation of your country. You may be required to comply to the current standards, or you or your company could end up being prosecuted for discrimination. It's a bit far-fetched, but prevention is better than cure. Please mind we do not give legal advice, but we orient ourselves as providing awareness and useful legal resources. Discover international laws Discover international laws Contribute We believe in shared knowledge. If you want to improve any part of signo, feel free to join the project. Being involved doesn't imply any responsibility on your end. Contribute to accessibility Contribute to accessibility"
  },
  {
    "id": "bdff2a5a-8e62-465b-814c-5454deaec45c",
    "title": "Laws",
    "description": "Developing a website or an app confronts you to some responsabilities.",
    "link": "https://signo.mathieudelvaux.be/learn/laws",
    "category": "learn",
    "keywords": [
      "learn",
      "laws"
    ],
    "content": "Physicists and philosophers seem to like nothing more than telling us that everything we thought about the world is wrong. They take a peculiar pleasure in exposing common sense as nonsense. But Tim Maudlin thinks our direct impressions of the world are a better guide to reality than we have been led to believe. European legislation Alongside to Member States developing their own local accessibility laws, the European Union also developed Directives legislating web accessibility. The EU went through the ratification of the United Nations Convention on the Rights of Persons with Disabilities (UNCRPD) in 2010, and adopted the Web Content Accessibility Guidelines 2.0 as a minimum standard for web development. The EU also published the Charter of Fundamental Rights, which states that discrimination based on grounds of disability, among others, is prohibited, and recognizes the rights of persons with disabilities and the need to ensure their independence, social and occupational integration and participation in the life of the community. Specifically for public services agencies, the EU purposed a Directive on the accessibility of the public sector bodies' websites. United Nations Convention on the Rights of Persons with Disabilities (UNCRPD) Charter of Fundamental Rights Directive on the accessibility of the public sector bodies' websites Please mind that these European Directives only sit in a complementary position according to State Laws provided by Member States. Check your country's mendatory legislative portal for more information. Read the EU Policy on Accessibility Read the EU Policy on Accessibility United States legislation Section 504 of the Rehabilitation Act is a civil rights law. It was the first civil rights legislation in the United States designed to protect individuals with disabilities from discrimination based on their disability status. This statute was intended to prevent intentional or unintentional discrimination based on a person's disability. Included as an amendment to the Rehabilitation Act of 1973, the message of this section is concise; Section 504, 29 U.S.C.§794, states: \"No otherwise qualified individual with a disability in the United States... shall, solely by reason of her or his disability, be excluded from participation in, be denied the benefits of, or be subjected to discrimination under any program or activity receiving Federal financial assistance\". Programs receiving federal funds may not discriminate against those with disabilities based on their disability status. Section 508, in the same Act, bars the Federal government from procuring electronic and information technology goods and services that are not fully accessible to those with disabilities. It directed the Access Board to create binding, enforceable standards that clearly outline and identify specifically what the federal government means by \"Accessible\" electronic and information technology products. The Access Board enlisted the help of government, academic, industry, and disability advocacy groups to create the EITAAC, or Electronic and Information Technology Access Advisory Committee. With the help of this committee the Access Board was able to create the first set of accessibility standards for Federal E&IT and publish them December 21, 2000. The Americans with Disabilities Act (ADA), passed in 1990, is civil rights legislation governed by the Department of Justice. The goal of this law is to make sure that people with disabilities can have an equal opportunity to participate in programs, services, and activities. It is important to note that the ADA does not deal directly with the accessibility of the Internet. This may be due to the fact that the Internet was just emerging as a widespread tool around the same time as the passage of the ADA. The Individuals with Disabilities Education Act, as amended in 1997, provides for a \"Free appropriate public education\" for all children with disabilities from preschool through high school. IDEA provides regulations, funding, and assistance to states for implementation. It also provides grants and activities in other areas such as research, personnel development, and early intervention. The Office of Special Education Programs in the US Department of Education administers IDEA. One of the ways a free appropriate public education is developed for students with disabilities is through a documented yearly process called the Individual Education Plan. United States legislation Section 504 of the Rehabilitation Act is a civil rights law. It was the first civil rights legislation in the United States designed to protect individuals with disabilities from discrimination based on their disability status. This statute was intended to prevent intentional or unintentional discrimination based on a person's disability. Included as an amendment to the Rehabilitation Act of 1973, the message of this section is concise; Section 504, 29 U.S.C.§794, states: \"No otherwise qualified individual with a disability in the United States... shall, solely by reason of her or his disability, be excluded from participation in, be denied the benefits of, or be subjected to discrimination under any program or activity receiving Federal financial assistance\". Programs receiving federal funds may not discriminate against those with disabilities based on their disability status. Section 508, in the same Act, bars the Federal government from procuring electronic and information technology goods and services that are not fully accessible to those with disabilities. It directed the Access Board to create binding, enforceable standards that clearly outline and identify specifically what the federal government means by \"Accessible\" electronic and information technology products. The Access Board enlisted the help of government, academic, industry, and disability advocacy groups to create the EITAAC, or Electronic and Information Technology Access Advisory Committee. With the help of this committee the Access Board was able to create the first set of accessibility standards for Federal E&IT and publish them December 21, 2000. The Americans with Disabilities Act (ADA), passed in 1990, is civil rights legislation governed by the Department of Justice. The goal of this law is to make sure that people with disabilities can have an equal opportunity to participate in programs, services, and activities. It is important to note that the ADA does not deal directly with the accessibility of the Internet. This may be due to the fact that the Internet was just emerging as a widespread tool around the same time as the passage of the ADA. The Individuals with Disabilities Education Act, as amended in 1997, provides for a \"Free appropriate public education\" for all children with disabilities from preschool through high school. IDEA provides regulations, funding, and assistance to states for implementation. It also provides grants and activities in other areas such as research, personnel development, and early intervention. The Office of Special Education Programs in the US Department of Education administers IDEA. One of the ways a free appropriate public education is developed for students with disabilities is through a documented yearly process called the Individual Education Plan. Other countries We cannot cover all the countries having published laws related to accessibility. We recommend heading to WebAIM, a project maintained by the State University of Utah. WebAIM"
  },
  {
    "id": "daf001b7-1159-451d-8e0c-68c226f5c874",
    "title": "Color Contrast",
    "description": "Calculate and validate the contrast between two colors and get smart suggestions.",
    "link": "https://signo.mathieudelvaux.be/tools/contrast",
    "category": "tools",
    "keywords": [
      "tools",
      "contrast"
    ],
    "content": ""
  },
  {
    "id": "5bfc4902-5f6b-4993-bd6f-058aec8decb0",
    "title": "Tools",
    "description": "Have a look at our accessibility toolbox and equip yourself.",
    "link": "https://signo.mathieudelvaux.be/tools",
    "category": "tools",
    "keywords": [
      "tools"
    ],
    "content": "The rights tools used correctly will definitly improve an accessibility-friendly workflow. At least that's our belief. This is why we put together this \"Tool\" section: to provide you with relevant tools that don't interfere with your habits. Color Contrast by signo This is our very own tool built to help you figure out color contrast. It was built by us on top of the WCAG (Web Content Accessibility Guidelines) guidelines. You can learn more about color contrast in our Design section. WCAG learn more about color contrast Our Color Contrast tool will calculate the contrast ratio of any colour you feed it with: start with your foreground color, then enter your background color. If your color contrast ratio fulfills all the WCAG 2.0 certifications, you get a nice preview of your palette. If your ratio is below 7, where contrast levels start to get low, we will suggest you a range of colors which are close to yours, but which features a contrast ratio of 7 or above. calculate the contrast ratio of any colour suggest you a range of colors which are close to yours Please note that in order to use our tool, JavaScript is required 👍 Check your colors Check your colors Resources We put together a list of what we found was useful when building this website, and what we think is useful when working with accessibility in any field, whether it be design or development. You can also suggest us additions to this list through GitHub. Resource your bookmarks Resources We put together a list of what we found was useful when building this website, and what we think is useful when working with accessibility in any field, whether it be design or development. You can also suggest us additions to this list through GitHub. Resource your bookmarks Resource your bookmarks W3C Guidelines Also know as WCAG, or WCAG 2.0 in its current norm, these rules specify how web developers and designers should create web content which can be accessible to people with disabilities. Disabilities include many different impairments. many different impairments WCAG me good WCAG me good"
  },
  {
    "id": "74060d91-339e-48c5-945e-223090752477",
    "title": "Resources",
    "description": "Fill your bookmarks with these accessibility-related tools.",
    "link": "https://signo.mathieudelvaux.be/tools/resources",
    "category": "tools",
    "keywords": [
      "tools",
      "resources"
    ],
    "content": "Here's a list of useful resources related to accessibility, whether design or development-related. Some of those resources where useful to signo. We hope they will be to you as well. Documentation Basic Screen Reader commands by The Paciello Group Go to Basic Screen Reader commands Documentation Chrome Accessibility Tools by Google Accessibility Go to Chrome Accessibility Tools Tool Chroma by Long Chen Go to Chroma Tool Color Contrast Ratio by signo Go to Color Contrast Ratio by signo Documentation Inclusive Design by Microsoft Go to Microsoft Inclusive Design Screen Reader JAWS for Windows Go to Jaws Tool JS KeyCodes by Keycode.info Go to Keycode.info Tool NoCoffee Vision Simulator by Aaron Leventhal Go to NoCoffee Vision Simulator Screen Reader NVDA for Windows Go to NVDA Documentation Orange a11y Recommendations by Orange Go to Orange a11y Recommendations Tool Sim Daltonism for Apple Go to Sim Daltonism Visionary Visionary by Visionary Go to Visionary Screen Reader VoiceOver by Apple Go to VoiceOver Tool tota11y by Khan Academy Go to tota11y Documentation WCAG 2.0 by W3C Go to WCAG 2.0 Documentation WebAIM by Utah State University Go to WebAIM Documentation Basic Screen Reader commands by The Paciello Group Go to Basic Screen Reader commands Documentation Basic Screen Reader commands by The Paciello Group Go to Basic Screen Reader commands Documentation Chrome Accessibility Tools by Google Accessibility Go to Chrome Accessibility Tools Documentation Chrome Accessibility Tools by Google Accessibility Go to Chrome Accessibility Tools Tool Chroma by Long Chen Go to Chroma Tool Chroma by Long Chen Go to Chroma Tool Color Contrast Ratio by signo Go to Color Contrast Ratio by signo Tool Color Contrast Ratio by signo Go to Color Contrast Ratio by signo Documentation Inclusive Design by Microsoft Go to Microsoft Inclusive Design Documentation Inclusive Design by Microsoft Go to Microsoft Inclusive Design Screen Reader JAWS for Windows Go to Jaws Screen Reader JAWS for Windows Go to Jaws Tool JS KeyCodes by Keycode.info Go to Keycode.info Tool JS KeyCodes by Keycode.info Go to Keycode.info Tool NoCoffee Vision Simulator by Aaron Leventhal Go to NoCoffee Vision Simulator Tool NoCoffee Vision Simulator by Aaron Leventhal Go to NoCoffee Vision Simulator Screen Reader NVDA for Windows Go to NVDA Screen Reader NVDA for Windows Go to NVDA Documentation Orange a11y Recommendations by Orange Go to Orange a11y Recommendations Documentation Orange a11y Recommendations by Orange Go to Orange a11y Recommendations Tool Sim Daltonism for Apple Go to Sim Daltonism Tool Sim Daltonism for Apple Go to Sim Daltonism Visionary Visionary by Visionary Go to Visionary Visionary Visionary by Visionary Go to Visionary Screen Reader VoiceOver by Apple Go to VoiceOver Screen Reader VoiceOver by Apple Go to VoiceOver Tool tota11y by Khan Academy Go to tota11y Tool tota11y by Khan Academy Go to tota11y Documentation WCAG 2.0 by W3C Go to WCAG 2.0 Documentation WCAG 2.0 by W3C Go to WCAG 2.0 Documentation WebAIM by Utah State University Go to WebAIM Documentation WebAIM by Utah State University Go to WebAIM"
  },
  {
    "id": "fb95353e-7839-42e5-901d-907a37bbc77d",
    "title": "W3C Guidelines",
    "description": "The WCAG published by the W3C is the graal of all guidelines for accessibility.",
    "link": "https://signo.mathieudelvaux.be/tools/w3c",
    "category": "tools",
    "keywords": [
      "tools",
      "w3c"
    ],
    "content": "The W3C Guidelines for accessibility, refered to as WCAG, are part of a series of guidelines published by the World Wide Web Consortium. They describe how to create accessible content for individuals with disabilities, but also for what they name \"restricted devices\" — understand mobile phones. The present version, 2.0, was adopted in 2012. One thing for sure is that anyone willingly trying to go through these guidelines has a very strong sense of determination. These rules are written very specifically, for the best of all of us. But then they are indigestible to read. Through signo, we tried to rewrite some aspects of this ruling, and most importantly, simplify it. You can still go through it if you will. Be warned it contains roughly 14.500 words. I have enough courage I have enough courage"
  }
]